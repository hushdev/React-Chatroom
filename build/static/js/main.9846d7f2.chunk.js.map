{"version":3,"sources":["components/Message.module.scss","components/send.svg","components/Header.module.scss","components/SignIn.module.scss","components/Message.jsx","components/Chat.jsx","components/Header.jsx","components/SignIn.jsx","App.js","serviceWorker.js","index.js","components/Chat.module.scss"],"names":["module","exports","Message","props","messageType","incoming","userImg","src","photo","alt","className","cn","msg","msg_wrap","msg_user","name","msg_text","message","msg_time","time","Chat","dummy","useRef","messagesRef","firestore","collection","query","orderBy","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","auth","currentUser","uid","photoURL","displayName","add","text","createdAt","firebase","FieldValue","serverTimestamp","console","log","chatroom","map","key","id","ref","input_form","type","placeholder","value","onChange","target","onClick","sendIcon","Header","header","SignIn","provider","signInWithPopup","signIn","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","useAuthState","user","GoogleAuthProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.9846d7f2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"msg\":\"Message_msg__2R95b\",\"msg_wrap\":\"Message_msg_wrap__LUVdI\",\"msg_user\":\"Message_msg_user__2dXOZ\",\"msg_text\":\"Message_msg_text__SPgm4\",\"msg_time\":\"Message_msg_time__1x4VT\"};","module.exports = __webpack_public_path__ + \"static/media/send.6850c1de.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2XAj3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"signIn\":\"SignIn_signIn__PGjkH\"};","import React from 'react'\nimport cn from './Message.module.scss'\n\nexport const Message = (props) => {\n    let messageType = props.incoming ? 'incoming' : 'outgoing'\n\n    let userImg = props.incoming\n        ? <img src={props.photo} alt=\"\" />\n        : null\n\n\n\n    return (\n        <div className={`${cn.msg} ${messageType}`}>\n            {userImg}\n            <div className={cn.msg_wrap}>\n                <p className={cn.msg_user}>{props.name}</p>\n                <p className={cn.msg_text}>{props.message}</p>\n                <p className={cn.msg_time}>{props.time}</p>\n            </div>\n        </div>\n    )\n\n}\n\n","import React, { useRef, useState } from 'react'\nimport cn from './Chat.module.scss'\nimport { Message } from './Message'\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport sendIcon from './send.svg'\n\nexport const Chat = (props) => {\n    const dummy = useRef();\n    const messagesRef = props.firestore.collection('messages');\n    const query = messagesRef.orderBy('createdAt')\n\n    const [messages] = useCollectionData(query, { idField: 'id' });\n\n    const [formValue, setFormValue] = useState('');\n\n\n    const sendMessage = async (e) => {\n        e.preventDefault();\n\n        const { uid, photoURL, displayName } = props.auth.currentUser;\n\n        await messagesRef.add({\n            text: formValue,\n            createdAt: props.firebase.firestore.FieldValue.serverTimestamp(),\n            uid,\n            photoURL,\n            displayName\n        })\n\n        setFormValue('');\n        // dummy.current.scrollIntoView({ behavior: 'smooth' });\n        console.log(messages);\n    }\n\n    return (\n        <>\n            <div className={cn.chatroom}>\n                <Message incoming={true} message=\"Hello. I'm happy to meet you in this chatroom.\" name=\"Admin\" />\n\n\n                {messages && messages.map(msg => {\n                    return <Message key={msg.id}\n                        message={msg.text}\n                        name={msg.displayName}\n                        photo={msg.photoURL} />\n                })}\n\n                <span ref={dummy}></span>\n\n            </div>\n            <form className={cn.input_form}>\n                <input type=\"text\" placeholder=\"Message...\" value={formValue} onChange={e => setFormValue(e.target.value)} />\n                <button onClick={sendMessage}>\n                    <img src={sendIcon} alt=\"\" />\n                </button>\n            </form>\n        </>\n    )\n}","import React from 'react'\nimport cn from './Header.module.scss'\n\nexport const Header = (props) => {\n    return (\n        <header className={cn.header}>\n            <span>Chat-room</span>\n            {/* <button onClick={props.signOut()}>Sign Out</button> */}\n        </header >\n    )\n}","import React from 'react'\nimport cn from './SignIn.module.scss'\n\nexport const SignIn = (props) => {\n\n    const signInWithGoogle = () => {\n        const provider = props.provider\n        props.auth.signInWithPopup(provider)\n    }\n\n    return (\n        <button onClick={signInWithGoogle} className={cn.signIn}>Sign In with google</button>\n    )\n}","import React from 'react'\nimport './App.scss'\n\nimport { Chat } from './components/Chat'\nimport { Header } from './components/Header'\nimport { SignIn } from './components/SignIn'\n\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\n\nimport { useAuthState } from 'react-firebase-hooks/auth'\n// import { useCollectionData } from 'react-firebase-hooks/firestore'\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyACZH4pfHj3yUHLdStsruXOPk4u_MJVuI4\",\n  authDomain: \"react-chat-e26a1.firebaseapp.com\",\n  databaseURL: \"https://react-chat-e26a1.firebaseio.com\",\n  projectId: \"react-chat-e26a1\",\n  storageBucket: \"react-chat-e26a1.appspot.com\",\n  messagingSenderId: \"450504077203\",\n  appId: \"1:450504077203:web:8119f72ff6dbd5b0a8c266\"\n})\n\nconst auth = firebase.auth()\nconst firestore = firebase.firestore()\n\n\nexport const App = () => {\n  const [user] = useAuthState(auth)\n  const provider = new firebase.auth.GoogleAuthProvider()\n\n  if (!user) {\n    return (\n      <div className=\"chat\">\n        <SignIn provider={provider} auth={auth} />\n      </div>\n    )\n  }\n\n  if (user) {\n    return (\n      <div className=\"chat\">\n        <Header />\n        <Chat auth={auth} firestore={firestore} firebase={firebase} />\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatroom\":\"Chat_chatroom__2KQXD\"};"],"sourceRoot":""}